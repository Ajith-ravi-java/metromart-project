package com.metromart.site.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.metromart.site.filter.JwtFilter;



@Configuration

public class SecurityConfiguration {
	
	@Autowired
	private UserDetailsService userdetailservice;
	
	@Autowired
	private JwtFilter jwtfilter;
	
	@Bean 
	public SecurityFilterChain disableCrsfTokan(HttpSecurity http) throws Exception {
		
			return http.csrf(cust->cust.disable())
					.authorizeHttpRequests(auth->auth.requestMatchers(
							"/metromart/api/home",
							"/metromart/api/get",
							"/metromart/api/login"
							)
							.permitAll()
							//.requestMatchers("/metromart/api/**").hasRole("user")
							.anyRequest().authenticated())
					.httpBasic(Customizer.withDefaults())
					.formLogin(Customizer.withDefaults())
					.sessionManagement(session->session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
					.addFilterBefore(jwtfilter, UsernamePasswordAuthenticationFilter.class)
					.build();
		
	}
	
	@Bean 
	public AuthenticationProvider authProvider() {
		System.out.println("step 1");
		DaoAuthenticationProvider provider=new DaoAuthenticationProvider();
		provider.setPasswordEncoder(NoOpPasswordEncoder.getInstance());
		provider.setUserDetailsService(userdetailservice);
		return provider;
	}
	
	@Bean
	public AuthenticationManager authenticateManager(AuthenticationConfiguration config) throws Exception {
		return config.getAuthenticationManager();
	}
	
	
	
	
	
	
	
	
	
	
}
